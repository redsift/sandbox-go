#!/bin/bash
set -eu

GV=$1
IS_LATEST=${2:-}

CIRCLE_BRANCH=${CIRCLE_BRANCH/\//-} # fix/sth => fix-sth
tagName=(${CIRCLE_BRANCH/-/ }) # release-1 => release
SUFFIX="-beta"
parentVersion="latest" # Let's use the latest Red Sift sandbox version
if [ $tagName == "release" ]; then
  SUFFIX=""
fi
imageName=$CONTAINER_NAME:v$GV$SUFFIX

echo "Configuring FROM and ENTRYPOINT in Dockerfile with base=sandbox:${parentVersion}"
sed "s/^\(FROM quay.io\/redsift\/sandbox:\).*$/\1${parentVersion}/" < Dockerfile > Dockerfile.versioned

echo Building $imageName
docker build --build-arg golang_version=$GV -t $imageName -f Dockerfile.versioned .

V=$(docker run -u 7438:7438 -t --entrypoint=/usr/local/go/bin/go $imageName version 2>&1 | cut -s -d " " -f3 | sed 's/go//')
echo "Container reported version:${V}"

MinorV=$(echo $GV | sed "s/\(.*\)\.\(.*\)\..*/\1.\2/")
MinorV_TAG=$CONTAINER_NAME:v$MinorV$SUFFIX
echo "Tagging as $MinorV_TAG"
docker tag $imageName $MinorV_TAG

if [[ "$IS_LATEST" == "true" ]]; then 
  MAJOR_VERSION=(${GV//./ })
  MV_TAG=$CONTAINER_NAME:v$MAJOR_VERSION$SUFFIX
  echo "Tagging as $MV_TAG"
  # docker tag $imageName $MV_TAG
fi

if [[ "$tagName" == "release" ]] && [[ "$IS_LATEST" == "true" ]]; then
  echo "Tagging as $CONTAINER_NAME:latest"
  # docker tag $imageName $CONTAINER_NAME:latest
fi
